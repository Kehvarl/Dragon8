 * Dragon8
** CHIP-8 VM in Dragon Ruby

*** Features
**** TODO Implement CHIP8 and perhaps SUPERCHIP opcodes.
**** TODO Laptop-friendly Keyboard  handling
**** TODO 64x32 display

*** Milestones
**** TODO FrameBuffer
***** DONE Working Display Module
****** DONE 64x32 mode
****** DONE Double Buffering
****** TODO Display Scaling
****** DONE XOR Pixel
****** DONE Write Byte at Address
***** DONE Sprites
****** DONE 8px wide by 1-15 (1-F) high
****** DONE XORed to screen
****** DONE VF set to 1 if any pixel flips from Set to Unset.  Otherwise 0

**** DONE Registers
***** DONE Address (I) 12 bit - 4096k addressable
***** DONE 16 General Purpose (V0-VF) 8 bit

**** DONE Stack - 48 bytes minimum

**** DONE Timers - Each timer decrements at 60hz until 0
***** DONE Delay - Value can be set and read
***** DONE Sound - While nonzero, emit "beep" sound

**** TODO Opcodes
***** DONE Register Operations
****** DONE LD Vx Immediate
****** DONE ADD Vx, Immediate
****** DONE 0x8nnn - Multiple Operations
***** DONE Flow Control -
****** DONE CALL
****** DONE RET
****** DONE JMP
****** DONE SE Immediate
****** DONE SNE Immediate
****** DONE SE Register
****** DONE SNE Register
****** DONE JMP Indirect
***** DONE Memory Management
****** DONE LD Address into I
***** DONE Graphics Interaction
***** DONE Timers
***** TODO Keyboard
**** DONE Opcode Doc

**** TODO Controls
***** DONE run/stop
***** DONE step
***** TODO color select
***** TODO load
***** TODO memory edit
***** TODO sprites
***** TODO Control Interaction
****** TODO Register Clicks
****** TODO Respond Appropriately
****** TODO Update Game State

**** TODO Memory Editor
***** TODO Examine Memory
***** TODO Set Memory
***** TODO Examine Registers
***** TODO Set Register
***** TODO Set PC
***** TODO Stack Editor

**** TODO ROM Loader
***** TODO Select Load address
****** Default 0x200
***** TODO Select File
#+begin_src ruby
contents = args.gtk.read_file "data/terrain.txt"
#+end_src
***** TODO Copy file contents to RAM
***** TODO RUN ROM

**** TODO Tests
***** DONE IBM Logo
***** DONE Dragon Ruby Logo - Simple
***** TODO more tests


** UI Notes
Canvas 1280x720
Display Margins
  Left 128
  Right 64
  Top 64
  Bottom 256
Display Size
  1088x401
  64x32 squares

* States
Initialize
  Clear RAM
  Reset PC
  Reset Registers
  Set State to Main
Main
  Run Input Loop
CPU_Step
  CPU Single Instruction
  Set State to Main
CPU_Running
  CPU Single Instruction
  Check for Input
ROM_Pick
  Display ROM Dialog
  Handle Input
  Set state to Main


Does state information live with the switches or in the state collection?
What happens when you flick a switch?
  * If animating, exit
  * Set Status to opposite State
  * Set target Animation State
  * Start Animating
  * if at end animation state, stop Animating
Haven't figured out callbacks
args.state.controls
  Run/Stop
  Step
  Reset
  Load ROM
  Display Color
  Keyboard Input
Other States
  Memory Editor
  Start/initialize
  Reset
  Sound
    Playing
